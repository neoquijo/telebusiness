import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { TelegramClientFactory } from './telegram/telegram';
import { StringSession } from 'telegram/sessions';
import { NewMessageEvent } from 'telegram/events';
import { Api } from 'telegram';
import { nc } from './nats';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { cors: true });
  await app.listen(3000);
  app.enableCors(); +16606601433

  await TelegramClientFactory.createClient('8U7-VLCQ', {
    session: new StringSession("1BAAOMTQ5LjE1NC4xNjcuOTEAUF7Yq9qhlXN+mA+8mB+1yQc9kdTLuwL8murATSI4UgmvzjWdxbC+THdlUcdADddin/yx6+ix9+jH3Q9kvlfEo4+fdkBy3M0J184GvAKVPVVDSwzbxrv72YB9DnYKhLRt0urOwxxCsjcaSvtPraxhCtQOGUk0PqRoQYcvKzyPNJpCLwARzcWYtXuZ1Kt2cnCrtTJYj+Om6cf/YzkkkRrTE6i5HzFXIo08QrMsDIHHUEHRWeqnlDI6LALCdUue8HA/oXcF94s9FHlcu99P62+G0mpVXb/1pcHj9jHYfL49kDR9XYck90oLa930cR0Yu7v54B/T25d+o9j1JGCYzr3Ftt8="),
    apiId: 19177732,
    apiHash: "b100d80721045777438318e47409ecae",
    connectionRetries: 5
  });



  const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
  let defaultDelayMs = 50000;
  const client = await TelegramClientFactory.getClient('8U7-VLCQ');


  // console.log(await client.getMe())
  const nats = await nc()


  // nats.on('algo', async (req, res) => {
  //   console.log('got algo')
  //   console.log(req)
  //   res.send(await client.getMe()

  //   )
  // })

  // const response = await nats.request(
  //   'algo', await client.getMe()
  // )

  // console.log(response)

  // Array of major Spanish cities and regions (over 100 to help reach 600 search variations)
  const spanishCities = [
    // Major cities
    // '–ú–∞–¥—Ä–∏–¥', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–í–∞–ª–µ–Ω—Å–∏—è', '–°–µ–≤–∏–ª—å—è', '–°–∞—Ä–∞–≥–æ—Å–∞', '–ú–∞–ª–∞–≥–∞', '–ú—É—Ä—Å–∏—è',
    // '–ü–∞–ª—å–º–∞', '–õ–∞—Å-–ü–∞–ª—å–º–∞—Å', '–ë–∏–ª—å–±–∞–æ', '–ê–ª–∏–∫–∞–Ω—Ç–µ', '–ö–æ—Ä–¥–æ–≤–∞', '–í–∞–ª—å—è–¥–æ–ª–∏–¥',
    // '–í–∏–≥–æ', '–•–∏—Ö–æ–Ω', '–≠—Å–ø–∞–Ω—å–æ–ª–∞', '–í–∏—Ç–æ—Ä–∏—è', '–ì—Ä–∞–Ω–∞–¥–∞', '–≠–ª—å—á–µ', '–û–≤—å–µ–¥–æ',
    // '–¢–µ—Ä—Ä–∞—Å—Å–∞', '–ë–∞—Ä–∞–∫–∞–ª—å–¥–æ', '–ú–æ—Å—Ç–æ–ª–µ—Å', '–°–∞–Ω—Ç–∞-–ö—Ä—É—Å', '–ü–∞–º–ø–ª–æ–Ω–∞', '–ê–ª—å–º–µ—Ä–∏—è',

    // // Tourist destinations
    // '–¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞', '–ë–µ–Ω–∏–¥–æ—Ä–º', '–ú–∞—Ä–±–µ–ª—å—è', '–ò–±–∏—Ü–∞', '–ú–∞–π–æ—Ä–∫–∞', '–¢–µ–Ω–µ—Ä–∏—Ñ–µ', '–ö–æ—Å—Ç–∞-–ë—Ä–∞–≤–∞',
    // '–ö–æ—Å—Ç–∞-–¥–µ–ª—å-–°–æ–ª—å', '–ö–æ—Å—Ç–∞-–ë–ª–∞–Ω–∫–∞', '–õ—å–æ—Ä–µ—Ç-–¥–µ-–ú–∞—Ä', '–°–∞–ª–æ—É', '–§—É—ç—Ä—Ç–µ–≤–µ–Ω—Ç—É—Ä–∞',
    // '–ì—Ä–∞–Ω-–ö–∞–Ω–∞—Ä–∏—è', '–õ–∞–Ω—Å–∞—Ä–æ—Ç–µ', '–ú–µ–Ω–æ—Ä–∫–∞', '–§–æ—Ä–º–µ–Ω—Ç–µ—Ä–∞', '–õ–∞-–ú–∞–Ω–≥–∞', '–≠—Å—Ç–µ–ø–æ–Ω–∞',
    // '–†–æ–Ω–¥–∞', '–ù–µ—Ä—Ö–∞', '–ö–∞–¥–∞–∫–µ—Å', '–¢–∞—Ä—Ä–∞–≥–æ–Ω–∞', '–ö–∞–¥–∏—Å', '–°–∞–Ω-–°–µ–±–∞—Å—Ç—å—è–Ω', '–°–∞–Ω—Ç–∞–Ω–¥–µ—Ä',

    // // Regions and provinces
    // '–ö–∞—Ç–∞–ª–æ–Ω–∏—è', '–ê–Ω–¥–∞–ª—É—Å–∏—è', '–í–∞–ª–µ–Ω—Å–∏—è', '–ì–∞–ª–∏—Å–∏—è', '–ö–∞—Å—Ç–∏–ª–∏—è', '–ö–∞–Ω—Ç–∞–±—Ä–∏—è', '–ê—Å—Ç—É—Ä–∏—è',
    // '–ê—Ä–∞–≥–æ–Ω', '–ù–∞–≤–∞—Ä—Ä–∞', '–ë–∞–ª–µ–∞—Ä—Å–∫–∏–µ', '–ö–∞–Ω–∞—Ä—Å–∫–∏–µ', '–†–∏–æ—Ö–∞', '–≠—Å—Ç—Ä–µ–º–∞–¥—É—Ä–∞', '–ú—É—Ä—Å–∏—è',

    // // Additional keywords
    // '–ò—Å–ø–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏–µ', '–ò—Å–ø–∞–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–ò—Å–ø–∞–Ω–∏—è —Ç—É—Ä–∏–∑–º', '–ò—Å–ø–∞–Ω–∏—è –æ—Ç–¥—ã—Ö',
    // '–ò—Å–ø–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞', '–ò—Å–ø–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å', '–ò—Å–ø–∞–Ω–∏—è —ç–º–∏–≥—Ä–∞—Ü–∏—è', '–ò—Å–ø–∞–Ω–∏—è –ø–µ—Ä–µ–µ–∑–¥',
    // '–ò—Å–ø–∞–Ω–∏—è —É—á–µ–±–∞', '–ò—Å–ø–∞–Ω–∏—è –í–ù–ñ', '–ò—Å–ø–∞–Ω–∏—è –ü–ú–ñ', '–†—É—Å—Å–∫–∏–µ –≤ –ò—Å–ø–∞–Ω–∏–∏',
    // '–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –≤ –ò—Å–ø–∞–Ω–∏–∏', '–†–æ—Å—Å–∏—è–Ω–µ –≤ –ò—Å–ø–∞–Ω–∏–∏', '–ê—Ä–µ–Ω–¥–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏',
    // '–ü–æ–∫—É–ø–∫–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏', '–ñ–∏–∑–Ω—å –≤ –ò—Å–ø–∞–Ω–∏–∏', '–û—Ç–ø—É—Å–∫ –≤ –ò—Å–ø–∞–Ω–∏–∏', '–í–∏–∑–∞ –≤ –ò—Å–ø–∞–Ω–∏—é',

    // // Detailed combinations
    // '–ú–∞–¥—Ä–∏–¥ —Ä—É—Å—Å–∫–∏–µ', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ —Ä—É—Å—Å–∫–∏–µ', '–í–∞–ª–µ–Ω—Å–∏—è —Ä—É—Å—Å–∫–∏–µ', '–ú–∞–ª–∞–≥–∞ —Ä—É—Å—Å–∫–∏–µ',
    // '–ê–ª–∏–∫–∞–Ω—Ç–µ —Ä—É—Å—Å–∫–∏–µ', '–¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞ —Ä—É—Å—Å–∫–∏–µ', '–ë–µ–Ω–∏–¥–æ—Ä–º —Ä—É—Å—Å–∫–∏–µ', '–ú–∞—Ä–±–µ–ª—å—è —Ä—É—Å—Å–∫–∏–µ',
    // '–¢–µ–Ω–µ—Ä–∏—Ñ–µ —Ä—É—Å—Å–∫–∏–µ', '–ò–±–∏—Ü–∞ —Ä—É—Å—Å–∫–∏–µ', '–ú–∞–π–æ—Ä–∫–∞ —Ä—É—Å—Å–∫–∏–µ', '–ö–∞–Ω–∞—Ä—ã —Ä—É—Å—Å–∫–∏–µ',
    // '–ö–∞—Ç–∞–ª–æ–Ω–∏—è —Ä—É—Å—Å–∫–∏–µ', '–ê–Ω–¥–∞–ª—É—Å–∏—è —Ä—É—Å—Å–∫–∏–µ', '–ö–æ—Å—Ç–∞ –ë–ª–∞–Ω–∫–∞ —Ä—É—Å—Å–∫–∏–µ', '–ö–æ—Å—Ç–∞ –¥–µ–ª—å –°–æ–ª—å —Ä—É—Å—Å–∫–∏–µ',

    // // With "—á–∞—Ç" keyword
    // '–ò—Å–ø–∞–Ω–∏—è —á–∞—Ç', '–ú–∞–¥—Ä–∏–¥ —á–∞—Ç', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ —á–∞—Ç', '–í–∞–ª–µ–Ω—Å–∏—è —á–∞—Ç', '–ú–∞–ª–∞–≥–∞ —á–∞—Ç',
    // '–ê–ª–∏–∫–∞–Ω—Ç–µ —á–∞—Ç', '–¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞ —á–∞—Ç',
    // '–ë–µ–Ω–∏–¥–æ—Ä–º —á–∞—Ç', '–†—É—Å—Å–∫–∏–µ –ò—Å–ø–∞–Ω–∏—è —á–∞—Ç',

    // With "—Ñ–æ—Ä—É–º" keyword
    // '–ò—Å–ø–∞–Ω–∏—è —Ñ–æ—Ä—É–º', '–ú–∞–¥—Ä–∏–¥ —Ñ–æ—Ä—É–º', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ —Ñ–æ—Ä—É–º', '–í–∞–ª–µ–Ω—Å–∏—è —Ñ–æ—Ä—É–º',
    // '–ú–∞–ª–∞–≥–∞ —Ñ–æ—Ä—É–º', '–ê–ª–∏–∫–∞–Ω—Ç–µ —Ñ–æ—Ä—É–º', '–¢–æ—Ä—Ä–µ–≤—å–µ—Ö–∞ —Ñ–æ—Ä—É–º', '–ë–µ–Ω–∏–¥–æ—Ä–º —Ñ–æ—Ä—É–º',

    // Additional coastal areas and tourist spots
    // '–ü–µ–Ω—å–∏—Å–∫–æ–ª–∞', '–ë–µ–Ω–∏–∫–∞—Å–∏–º', '–ö–∞—Å—Ç–µ–ª—å–æ–Ω', '–û—Ä–æ–ø–µ—Å–∞', '–ö—É–ª—å–µ—Ä–∞', '–ë–µ–Ω–∏—á–æ—Ñ–∞—Ä',
    // '–û—Ä–∏—É—ç–ª–∞', '–ì—É–∞—Ä–¥–∞–º–∞—Ä', '–ü—É–Ω—Ç–∞ –ü—Ä–∏–º–∞', '–ö–∞–±–æ –†–æ–∏–≥', '–ü–∏–ª–∞—Ä –¥–µ –ª–∞ –û—Ä–∞–¥–∞–¥–∞',
    // '–ú–∏–ª –ü–∞–ª—å–º–µ—Ä–∞—Å', '–°–∞–Ω—Ç–∞ –ü–æ–ª–∞', '–ê–ª–∏–∫–∞–Ω—Ç–µ —Ü–µ–Ω—Ç—Ä', '–ê–ª–∏–∫–∞–Ω—Ç–µ –ø–æ—Ä—Ç',
    // '–ë–µ–Ω–∞–ª—å–º–∞–¥–µ–Ω–∞', '–§—É—ç–Ω—Ö–∏—Ä–æ–ª–∞', '–ú–∏—Ö–∞—Å', '–¢–æ—Ä—Ä–µ–º–æ–ª–∏–Ω–æ—Å', '–ù–µ—Ä—Ö–∞', '–ê–ª—å–º—É–Ω—å–µ–∫–∞—Ä',
    // '–°–µ–ª–∞ –ú–∞–ª—å—Ç–∞', '–ü—É—ç—Ä—Ç–æ –ë–∞–Ω—É—Å', '–ú–∏—Ö–∞—Å –ö–æ—Å—Ç–∞', '–õ–∞ –ö–∞—Ä–∏—Ö—É—ç–ª–∞', '–≠–ª—å –†–æ–±–ª–µ–¥–∞–ª—å',

    // Practical Spanish keywords
    // '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ò—Å–ø–∞–Ω–∏—è', '–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ò—Å–ø–∞–Ω–∏—è', '–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è –ò—Å–ø–∞–Ω–∏—è',

    // '–ü–µ—Ä–µ–µ–∑–¥ –≤ –ò—Å–ø–∞–Ω–∏—é',
    // '–†–∞–±–æ—Ç–∞ –ò—Å–ø–∞–Ω–∏—è',
    // '–£—á–µ–±–∞ –ò—Å–ø–∞–Ω–∏—è',
    // '–í—Ä–∞—á–∏ –ò—Å–ø–∞–Ω–∏—è',
    // '–ú–µ–¥–∏—Ü–∏–Ω–∞ –ò—Å–ø–∞–Ω–∏—è', '–õ–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è –ò—Å–ø–∞–Ω–∏—è', '–î–æ–∫—É–º–µ–Ω—Ç—ã –ò—Å–ø–∞–Ω–∏—è', '–ù–∞–ª–æ–≥–∏ –ò—Å–ø–∞–Ω–∏—è',
    // '–ë–∏–∑–Ω–µ—Å –ò—Å–ø–∞–Ω–∏—è', '–®–∫–æ–ª—ã –ò—Å–ø–∞–Ω–∏—è', '–ë–∞–Ω–∫–∏ –ò—Å–ø–∞–Ω–∏—è', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ò—Å–ø–∞–Ω–∏—è',
    // '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –ò—Å–ø–∞–Ω–∏—è',
    //  '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ò—Å–ø–∞–Ω–∏—è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ò—Å–ø–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏–µ',
    // '–ú–∞–≥–∞–∑–∏–Ω—ã –ò—Å–ø–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏–µ', '–Æ—Ä–∏—Å—Ç—ã –ò—Å–ø–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏–µ', '–ê–¥–≤–æ–∫–∞—Ç—ã –ò—Å–ø–∞–Ω–∏—è',

    // Community and services
    // '–†—É—Å—Å–∫–∞—è –æ–±—â–∏–Ω–∞ –ò—Å–ø–∞–Ω–∏—è', '–°–æ–æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –ò—Å–ø–∞–Ω–∏—è', '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ò—Å–ø–∞–Ω–∏—è',
    // '–ê–ª—å–±–∏—Ä', '–ê–ª—å—Ç–µ–∞', '–ö–∞–ª—å–ø–µ', '–•–∞–≤–µ–∞', '–î–µ–Ω–∏—è', '–ì–∞–Ω–¥–∏—è', '–û–ª–∏–≤–∞',
    // '–†—É—Å—Å–∫–∏–µ –≤—Ä–∞—á–∏ –ò—Å–ø–∞–Ω–∏—è', '–†—É—Å—Å–∫–∏–µ —à–∫–æ–ª—ã –ò—Å–ø–∞–Ω–∏—è', '–†—É—Å—Å–∫–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –ò—Å–ø–∞–Ω–∏—è',

    // '–†—É—Å—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ò—Å–ø–∞–Ω–∏—è', 
    // '–†—É—Å—Å–∫–∏–µ –°–ú–ò –ò—Å–ø–∞–Ω–∏—è', '–†—É—Å—Å–∫–æ–µ —Ä–∞–¥–∏–æ –ò—Å–ø–∞–Ω–∏—è',
    // '–†—É—Å—Å–∫–æ–µ –¢–í –ò—Å–ø–∞–Ω–∏—è', '–†—É—Å—Å–∫–∏–µ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã –ò—Å–ø–∞–Ω–∏—è', '–†—É—Å—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò—Å–ø–∞–Ω–∏—è',

    // // Additional regional cities
    // '–ê–ª–∏–∫–∞–Ω—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', '–í–∞–ª–µ–Ω—Å–∏—è –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', '–ö–∞—Å—Ç–µ–ª—å–æ–Ω –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', 
    // '–ú–∞–ª–∞–≥–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è',
    // '–ñ–∏—Ä–æ–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', '–¢–∞—Ä—Ä–∞–≥–æ–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏—è', '–ú—É—Ä—Å–∏—è —Ä–µ–≥–∏–æ–Ω',
    // '–ê–ª–∏–∫–∞–Ω—Ç–µ —Ä–µ–≥–∏–æ–Ω', '–í–∞–ª–µ–Ω—Å–∏—è —Ä–µ–≥–∏–æ–Ω', '–ú–∞–ª–∞–≥–∞ —Ä–µ–≥–∏–æ–Ω', '–ö–∞–Ω–∞—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',
    // '–ë–∞–ª–µ–∞—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞',

    // More tourist zones
    // '–ö–æ—Å—Ç–∞ –¢—Ä–æ–ø–∏–∫–∞–ª—å', '–ö–æ—Å—Ç–∞ –¥–µ –ê–ª—å–º–µ—Ä–∏—è', '–ö–æ—Å—Ç–∞ –¥–µ –ª–∞ –õ—É—Å', '–ö–æ—Å—Ç–∞ –î–æ—Ä–∞–¥–∞',
    // '–ö–æ—Å—Ç–∞ –¥–µ–ª—å –ì–∞—Ä—Ä–∞—Ñ', '–ö–æ—Å—Ç–∞ –¥–µ–ª—å –ú–∞—Ä–µ—Å–º–µ', '–ö–æ—Å—Ç–∞ –í–µ—Ä–¥–µ', '–ö–æ—Å—Ç–∞ –í–∞—Å–∫–∞'
  ];

  // let totalChannelsFound = 0;
  // let totalChannelsJoined = 0;
  // let processedSearches = 0;

  // console.log(`üîç Starting search process for ${spanishCities.length} Spanish city keywords in Russian`);

  // for (const city of spanishCities) {
  //   processedSearches++;
  //   console.log(`\n======================================================`);
  //   console.log(`üîç Search ${processedSearches}/${spanishCities.length}: "${city}"`);
  //   try {
  //     const result = await client.invoke(
  //       new Api.contacts.Search({
  //         q: city,
  //         limit: 100,
  //       })
  //     );

  //     // Filter only channels that have the Channel class name, aren't megagroups, and aren't broadcast channels
  //     const channels = result.chats.filter(
  //       (chat: any) => chat.className === "Channel" && !chat.broadcast
  //     );

  //     // Show total channels found for this city
  //     console.log(`üîç Found: ${channels.length} channels matching "${city}"`);
  //     totalChannelsFound += channels.length;

  //     if (channels.length > 0) {
  //       let joinedCount = 0;
  //       const totalToJoin = channels.length;

  //       for (const channel of channels) {
  //         let delayMs = defaultDelayMs;
  //         const remaining = totalToJoin - joinedCount;

  //         // Safely get channel title
  //         const channelTitle = getChannelTitle(channel);

  //         console.log(`‚è≥ Progress: Joined: ${joinedCount}, To Join: ${remaining}`);
  //         console.log(`‚û°Ô∏è Joining: ${channelTitle}`);

  //         try {
  //           await client.invoke(
  //             new Api.channels.JoinChannel({
  //               channel,
  //             })
  //           );

  //           joinedCount++;
  //           totalChannelsJoined++;
  //           console.log(`‚úÖ Joined: ${channelTitle}`);
  //         } catch (error: any) {
  //           const msg = error.message || "";

  //           // Handle both formats of flood wait error messages
  //           const floodMatch = msg.match(/FLOOD_WAIT_(\d+)/);
  //           const waitMatch = msg.match(/A wait of (\d+) seconds is required/);

  //           if (floodMatch || waitMatch) {
  //             // Extract seconds from whichever regex matched
  //             const waitSeconds = parseInt(floodMatch ? floodMatch[1] : waitMatch[1]);
  //             // Add random buffer between 1-5 seconds
  //             const bufferSeconds = Math.floor(Math.random() * 5) + 1;
  //             const totalWaitSeconds = waitSeconds + bufferSeconds;
  //             delayMs = totalWaitSeconds * 1000;

  //             console.warn(`‚è± FLOOD_WAIT detected: Waiting ${waitSeconds} seconds + ${bufferSeconds} buffer = ${totalWaitSeconds} seconds`);

  //             // Actually wait here before attempting next join
  //             console.log(`‚è≥ Pausing join operations until ${new Date(Date.now() + delayMs).toLocaleTimeString()}...`);
  //             await sleep(delayMs);
  //             console.log(`‚ñ∂Ô∏è Resuming join operations now.`);
  //           } else {
  //             console.warn(`‚ùå Failed to join ${channelTitle}: ${msg}`);
  //           }
  //         }

  //         // Only wait the default time if we didn't encounter a flood wait
  //         // const wasFloodWait = (error: any) => {
  //         //   const msg = error?.message || "";
  //         //   return msg.includes("FLOOD_WAIT") || msg.includes("A wait of");
  //         // };

  //         // if (remaining > 1 && !wasFloodWait(error)) {
  //         //   console.log(`‚è≥ Waiting ${defaultDelayMs / 1000} seconds before next join...`);
  //         //   await sleep(defaultDelayMs);
  //         // }

  //         let hadFloodWait = false;

  //         try {
  //           await client.invoke(
  //             new Api.channels.JoinChannel({
  //               channel,
  //             })
  //           );

  //           joinedCount++;
  //           totalChannelsJoined++;
  //           console.log(`‚úÖ Joined: ${channelTitle}`);
  //         } catch (error: any) {
  //           const msg = error.message || "";

  //           // Handle both formats of flood wait error messages
  //           const floodMatch = msg.match(/FLOOD_WAIT_(\d+)/);
  //           const waitMatch = msg.match(/A wait of (\d+) seconds is required/);

  //           if (floodMatch || waitMatch) {
  //             // Set the flag that we had a flood wait
  //             hadFloodWait = true;

  //             // Extract seconds from whichever regex matched
  //             const waitSeconds = parseInt(floodMatch ? floodMatch[1] : waitMatch[1]);
  //             // Add random buffer between 1-5 seconds
  //             const bufferSeconds = Math.floor(Math.random() * 5) + 1;
  //             const totalWaitSeconds = waitSeconds + bufferSeconds;
  //             delayMs = totalWaitSeconds * 1000;

  //             console.warn(`‚è± FLOOD_WAIT detected: Waiting ${waitSeconds} seconds + ${bufferSeconds} buffer = ${totalWaitSeconds} seconds`);

  //             // Actually wait here before attempting next join
  //             console.log(`‚è≥ Pausing join operations until ${new Date(Date.now() + delayMs).toLocaleTimeString()}...`);
  //             await sleep(delayMs);
  //             console.log(`‚ñ∂Ô∏è Resuming join operations now.`);
  //           } else {
  //             console.warn(`‚ùå Failed to join ${channelTitle}: ${msg}`);
  //           }
  //         }

  //         // Only wait the default time if we didn't encounter a flood wait
  //         if (remaining > 1 && !hadFloodWait) {
  //           console.log(`‚è≥ Waiting ${defaultDelayMs / 1000} seconds before next join...`);
  //           await sleep(defaultDelayMs);
  //         }
  //       }

  //       console.log(`üéâ City "${city}" completed! Joined ${joinedCount} out of ${totalToJoin} channels.`);
  //     }

  //     // Wait between city searches to avoid rate limits
  //     console.log(`\n‚è≥ Waiting 5 seconds before searching next city...`);
  //     await sleep(5000);

  //   } catch (error) {
  //     console.error(`‚ùå Search for "${city}" failed:`, error);
  //   }

  //   // Update overall progress
  //   console.log(`\nüìä OVERALL PROGRESS: Searched ${processedSearches}/${spanishCities.length} keywords`);
  //   console.log(`üìä Total channels found: ${totalChannelsFound}`);
  //   console.log(`üìä Total channels joined: ${totalChannelsJoined}`);
  // }

  // console.log(`\n=======================================================`);
  // console.log(`üéâüéâüéâ SEARCH PROCESS COMPLETED! üéâüéâüéâ`);
  // console.log(`üìä Total search keywords processed: ${processedSearches}`);
  // console.log(`üìä Total channels found: ${totalChannelsFound}`);
  // console.log(`üìä Total channels joined: ${totalChannelsJoined}`);
  // console.log(`=======================================================`);

  // return { processedSearches, totalChannelsFound, totalChannelsJoined };
}

// Helper function to safely get channel title
// function getChannelTitle(channel: any): string {
//   if (!channel) return "Unknown Channel";

//   // Try different properties where title might be stored
//   if (typeof channel.title === 'string') {
//     return channel.title;
//   }

//   // For Chat objects
//   if (typeof channel.chat?.title === 'string') {
//     return channel.chat.title;
//   }

//   // For access via getter
//   if (typeof channel.getTitle === 'function') {
//     return channel.getTitle();
//   }

//   // If channel has an id, use that as fallback
//   if (channel.id) {
//     return `Channel #${channel.id}`;
//   }

//   return "Unnamed Channel";
// }

bootstrap();