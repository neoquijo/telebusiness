import { FC, useState } from 'react';
import css from './MessageStatisticsPage.module.css';
import { useGetMessageStatisticsQuery } from '../../../API/messagesApi';
import { FaChartBar, FaArrowLeft, FaCalendarAlt, FaChevronDown, FaChevronUp } from 'react-icons/fa';
import Button from '../../../shared/components/UI/Button/Button';
import { useNavigate } from 'react-router-dom';
import Input from '../../../shared/components/UI/Input/Input';

interface IProps { }

const MessageStatisticsPage: FC<IProps> = () => {
  const navigate = useNavigate();
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [isOverviewVisible, setIsOverviewVisible] = useState(true);

  const queryParams = new URLSearchParams();
  if (startDate) {
    const fromDate = new Date(`${startDate}T00:00:00`); // –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC
    const fromTimestamp = Math.floor(fromDate.getTime() / 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã
    queryParams.append('from', fromTimestamp.toString());
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ endDate –≤ Unix timestamp
  if (endDate) {
    const toDate = new Date(`${endDate}T23:59:59`); // –ö–æ–Ω–µ—Ü –¥–Ω—è –≤ UTC
    const toTimestamp = Math.floor(toDate.getTime() / 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã
    queryParams.append('to', toTimestamp.toString());
  }

  const { data: statistics, isFetching, refetch } = useGetMessageStatisticsQuery(queryParams.toString());

  const handleDateReset = () => {
    setStartDate('');
    setEndDate('');
  };

  return (
    <div className={css.wrapper}>
      <div className={css.header}>
        <div className={css.title}>
          <FaChartBar className={css.titleIcon} />
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        </div>
        <div className={css.headerActions}>
          <Button
            icon={FaArrowLeft}
            variant="ghost"
            onClick={() => navigate('/messages')}
          >
            –ù–∞–∑–∞–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
          </Button>
        </div>
      </div>

      <div className={css.filterSection}>
        <div className={css.dateFilters}>
          <div className={css.dateGroup}>
            <FaCalendarAlt className={css.calendarIcon} />
            <Input
              type="date"
              label="–î–∞—Ç–∞ –æ—Ç"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
            <Input
              type="date"
              label="–î–∞—Ç–∞ –¥–æ"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
            <Button onClick={handleDateReset} variant="ghost">
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
            <Button onClick={() => refetch()}>
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
          </div>
        </div>
      </div>

      {isFetching ? (
        <div className={css.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
      ) : (
        <div className={css.content}>
          <div className={css.overviewHeader} onClick={() => setIsOverviewVisible(!isOverviewVisible)}>
            <h3>–°–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö</h3>
            {isOverviewVisible ? <FaChevronUp /> : <FaChevronDown />}
          </div>
          
          {isOverviewVisible && (
            <div className={css.overviewCards}>
              <div className={css.card}>
                <div className={css.cardIcon}>üìä</div>
                <div className={css.cardContent}>
                  <div className={css.cardValue}>{statistics?.totalMessages || 0}</div>
                  <div className={css.cardLabel}>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                </div>
              </div>

              <div className={css.card}>
                <div className={css.cardIcon}>üîç</div>
                <div className={css.cardContent}>
                  <div className={css.cardValue}>{statistics?.filteredMessages || 0}</div>
                  <div className={css.cardLabel}>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö</div>
                </div>
              </div>

              <div className={css.card}>
                <div className={css.cardIcon}>üìà</div>
                <div className={css.cardContent}>
                  <div className={css.cardValue}>{statistics?.filteredPercentage || 0}%</div>
                  <div className={css.cardLabel}>–ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</div>
                </div>
              </div>
            </div>
          )}

          <div className={css.chartsSection}>
            <div className={css.chartCard}>
              <h3 className={css.chartTitle}>–¢–æ–ø —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
              <div className={css.filtersList}>
                {statistics?.topFilters?.map((filter, index) => (
                  <div key={filter._id} className={css.filterItem}>
                    <div className={css.filterRank}>#{index + 1}</div>
                    <div className={css.filterName}>{filter.filterName}</div>
                    <div className={css.filterCount}>{filter.count} —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                  </div>
                )) || <div className={css.noData}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>}
              </div>
            </div>

            <div className={css.chartCard}>
              <h3 className={css.chartTitle}>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º</h3>
              <div className={css.accountsList}>
                {statistics?.topAccounts?.map((account, index) => (
                  <div key={account._id} className={css.accountItem}>
                    <div className={css.accountRank}>#{index + 1}</div>
                    <div className={css.accountName}>{account._id}</div>
                    <div className={css.accountCount}>{account.count} —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                  </div>
                )) || <div className={css.noData}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MessageStatisticsPage;