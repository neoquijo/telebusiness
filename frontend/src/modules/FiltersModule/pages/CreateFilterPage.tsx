// src/modules/FiltersModule/pages/CreateFilterPage.tsx
import { FC, useState } from 'react';
import css from './CreateFilterPage.module.css';
import Input from '../../../shared/components/UI/Input/Input';
import Button from '../../../shared/components/UI/Button/Button';
import { FaSave, FaPlus, FaTimes, FaThumbsUp, FaThumbsDown } from 'react-icons/fa';
import { useCreateFilterMutation, CreateFilterDto } from '../../../API/filtersApi';
import { useNavigate } from 'react-router-dom';
import { infoSuccess, infoError } from '../../../shared/lib/toastWrapper';
import TextBox from '../../../shared/components/UI/Textbox/Textbox';

interface IProps { }

const CreateFilterPage: FC<IProps> = () => {
  const navigate = useNavigate();
  const [createFilter, { isLoading }] = useCreateFilterMutation();

  const [formData, setFormData] = useState<CreateFilterDto>({
    name: '',
    includesText: [],
    excludesText: [],
    regexp: '',
    callbackTopic: ''
  });

  const [includeInput, setIncludeInput] = useState('');
  const [excludeInput, setExcludeInput] = useState('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validateRegex = (pattern: string): boolean => {
    if (!pattern) return true;
    try {
      new RegExp(pattern);
      return true;
    } catch {
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const newErrors: { [key: string]: string } = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (formData.regexp && !validateRegex(formData.regexp)) {
      newErrors.regexp = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ';
    }

    if ((formData.includesText?.length || 0) === 0 &&
      (formData.excludesText?.length || 0) === 0 &&
      !formData.regexp) {
      newErrors.general = '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏';
    }

    setErrors(newErrors);

    if (Object.keys(newErrors).length > 0) {
      infoError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
      return;
    }

    try {
      await createFilter(formData).unwrap();
      infoSuccess('–§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      navigate('/filters');
    } catch (error) {
      infoError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞');
      console.error('Create filter error:', error);
    }
  };

  const addIncludeText = () => {
    const text = includeInput.trim();
    if (text && !(formData.includesText || []).includes(text)) {
      setFormData(prev => ({
        ...prev,
        includesText: [...(prev.includesText || []), text]
      }));
      setIncludeInput('');
      // –û—á–∏—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ
      if (errors.general) {
        setErrors(prev => ({ ...prev, general: '' }));
      }
    }
  };

  const removeIncludeText = (index: number) => {
    setFormData(prev => ({
      ...prev,
      includesText: (prev.includesText || []).filter((_, i) => i !== index)
    }));
  };

  const addExcludeText = () => {
    const text = excludeInput.trim();
    if (text && !(formData.excludesText || []).includes(text)) {
      setFormData(prev => ({
        ...prev,
        excludesText: [...(prev.excludesText || []), text]
      }));
      setExcludeInput('');
      // –û—á–∏—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ
      if (errors.general) {
        setErrors(prev => ({ ...prev, general: '' }));
      }
    }
  };

  const removeExcludeText = (index: number) => {
    setFormData(prev => ({
      ...prev,
      excludesText: (prev.excludesText || []).filter((_, i) => i !== index)
    }));
  };

  const handleIncludeKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addIncludeText();
    }
  };

  const handleExcludeKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addExcludeText();
    }
  };

  const handleRegexChange = (value: string) => {
    setFormData(prev => ({ ...prev, regexp: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É regex –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors.regexp) {
      setErrors(prev => ({ ...prev, regexp: '' }));
    }
    // –û—á–∏—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ regex
    if (errors.general && value.trim()) {
      setErrors(prev => ({ ...prev, general: '' }));
    }
  };

  const callbackTopics = [
    { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...' },
    { value: 'webhook', label: 'Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' },
    { value: 'email', label: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' },
    { value: 'log', label: '–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥' },
    { value: 'telegram', label: 'Telegram –±–æ—Ç' },
    { value: 'database', label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É' }
  ];

  return (
    <div className={css.wrapper}>
      <div className={css.header}>
        <h1 className={css.title}>–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h1>
        <p className={css.subtitle}>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        </p>
      </div>

      <form onSubmit={handleSubmit} className={css.form}>
        {errors.general && (
          <div className={css.generalError}>
            <FaTimes className={css.errorIcon} />
            {errors.general}
          </div>
        )}

        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className={css.sectionIcon}>üìù</div>
          </div>

          <div className={css.inputGroup}>
            <Input
              label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ *"
              value={formData.name}
              onChange={(e) => {
                setFormData(prev => ({ ...prev, name: e.target.value }));
                if (errors.name) setErrors(prev => ({ ...prev, name: '' }));
              }}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

              required
            />
          </div>

          <div className={css.inputGroup}>
            <label className={css.label}>–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏</label>
            <select
              className={css.select}
              value={formData.callbackTopic}
              onChange={(e) => setFormData(prev => ({ ...prev, callbackTopic: e.target.value }))}
            >
              {callbackTopics.map(topic => (
                <option key={topic.value} value={topic.value}>
                  {topic.label}
                </option>
              ))}
            </select>
            <span className={css.hint}>
              –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            </span>
          </div>
        </div>

        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–¢–µ–∫—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è</h3>
            <div className={css.sectionIcon}>üîç</div>
          </div>

          <div className={css.textConditions}>
            <div className={css.conditionGroup}>
              <div className={css.conditionHeader}>
                <FaThumbsUp className={css.includeIcon} />
                <label className={css.conditionLabel}>–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</label>
              </div>
              <p className={css.conditionHint}>
                –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –í–°–ï —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã
              </p>

              <div className={css.inputWithButton}>
                <Input
                  value={includeInput}
                  onChange={(e) => setIncludeInput(e.target.value)}
                  onKeyPress={handleIncludeKeyPress}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞..."
                />
                <Button
                  type="button"
                  icon={FaPlus}
                  onClick={addIncludeText}
                  disabled={!includeInput.trim()}

                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </div>

              {(formData.includesText?.length || 0) > 0 && (
                <div className={css.tags}>
                  {(formData.includesText || []).map((text, index) => (
                    <div key={index} className={`${css.tag} ${css.includeTag}`}>
                      <span>{text}</span>
                      <Button
                        type="button"

                        variant="ghost"
                        icon={FaTimes}
                        onClick={() => removeIncludeText(index)}
                        className={css.removeTag}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className={css.conditionGroup}>
              <div className={css.conditionHeader}>
                <FaThumbsDown className={css.excludeIcon} />
                <label className={css.conditionLabel}>–ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</label>
              </div>
              <p className={css.conditionHint}>
                –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–æ, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –õ–Æ–ë–û–ï –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑
              </p>

              <div className={css.inputWithButton}>
                <Input
                  value={excludeInput}
                  onChange={(e) => setExcludeInput(e.target.value)}
                  onKeyPress={handleExcludeKeyPress}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è..."
                />
                <Button
                  type="button"
                  icon={FaPlus}
                  onClick={addExcludeText}
                  disabled={!excludeInput.trim()}

                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </div>

              {(formData.excludesText?.length || 0) > 0 && (
                <div className={css.tags}>
                  {(formData.excludesText || []).map((text, index) => (
                    <div key={index} className={`${css.tag} ${css.excludeTag}`}>
                      <span>{text}</span>
                      <Button
                        type="button"

                        variant="ghost"
                        icon={FaTimes}
                        onClick={() => removeExcludeText(index)}
                        className={css.removeTag}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</h3>
            <div className={css.sectionIcon}>
              –¥—â–¥
              {/* <FaRegex /> */}
            </div>
          </div>

          <div className={css.regexSection}>
            <TextBox
              label="–ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"
              value={formData.regexp}
              onChange={(e: { target: { value: string; }; }) => handleRegexChange(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: \b(–≤–∞–∂–Ω–æ|—Å—Ä–æ—á–Ω–æ|urgent)\b"
              rows={3}
            />

            <div className={css.regexHelp}>
              <p className={css.hint}>
                <strong>–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:</strong>
              </p>
              <ul className={css.examples}>
                <li><code>\b\d{4}-\d{2}-\d{2}\b</code> - –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î</li>
                <li><code>@\w+</code> - —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                <li><code>#\w+</code> - —Ö–µ—à—Ç–µ–≥–∏</li>
                <li><code>\b(–≤–∞–∂–Ω–æ|—Å—Ä–æ—á–Ω–æ|–∫—Ä–∏—Ç–∏—á–Ω–æ)\b</code> - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</li>
              </ul>
              <p className={css.hint}>
                –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞.
                {formData.regexp && validateRegex(formData.regexp) && (
                  <span className={css.regexValid}> ‚úì –í—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ</span>
                )}
              </p>
            </div>
          </div>
        </div>

        <div className={css.previewSection}>
          <h3 className={css.previewTitle}>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞</h3>
          <div className={css.preview}>
            <div className={css.previewItem}>
              <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            </div>
            {(formData.includesText?.length || 0) > 0 && (
              <div className={css.previewItem}>
                <strong>–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</strong> {formData.includesText!.join(', ')}
              </div>
            )}
            {(formData.excludesText?.length || 0) > 0 && (
              <div className={css.previewItem}>
                <strong>–ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</strong> {formData.excludesText!.join(', ')}
              </div>
            )}
            {formData.regexp && (
              <div className={css.previewItem}>
                <strong>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:</strong> <code>{formData.regexp}</code>
              </div>
            )}
            {formData.callbackTopic && (
              <div className={css.previewItem}>
                <strong>–î–µ–π—Å—Ç–≤–∏–µ:</strong> {callbackTopics.find(t => t.value === formData.callbackTopic)?.label}
              </div>
            )}
          </div>
        </div>

        <div className={css.actions}>
          <Button
            type="submit"
            icon={FaSave}
            disabled={isLoading}

          >
            {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞...' : '–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä'}
          </Button>
          <Button
            type="button"
            variant="ghost"
            onClick={() => navigate('/filters')}

          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </div>
      </form>
    </div>
  );
};

export default CreateFilterPage;