// src/modules/FiltersModule/pages/FilterDetailPage.tsx
import { FC, useState, useEffect } from 'react';
import css from './FilterDetailPage.module.css';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { useGetFilterQuery, useUpdateFilterMutation, UpdateFilterDto } from '../../../API/filtersApi';
import { FaEdit, FaSave, FaTimes, FaThumbsUp, FaThumbsDown, FaPlay } from 'react-icons/fa';
import Button from '../../../shared/components/UI/Button/Button';
import Input from '../../../shared/components/UI/Input/Input';
import { infoSuccess, infoError } from '../../../shared/lib/toastWrapper';
import { useModalManager } from '../../../core/providers/modal/ModalProvider';
import TestFilterModal from '../modals/TestFilterModal';
import NoData from '../../../shared/components/NoData/NoData';
import TextBox from '../../../shared/components/UI/Textbox/Textbox';

interface IProps { }

const FilterDetailPage: FC<IProps> = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const modal = useModalManager();
  const isEditMode = searchParams.get('edit') === 'true';

  const { data: filter, isFetching, error } = useGetFilterQuery(id!);
  const [updateFilter, { isLoading: isUpdating }] = useUpdateFilterMutation();

  const [isEditing, setIsEditing] = useState(isEditMode);
  const [formData, setFormData] = useState<UpdateFilterDto>({});
  const [includeInput, setIncludeInput] = useState('');
  const [excludeInput, setExcludeInput] = useState('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (filter) {
      setFormData({
        name: filter.name,
        includesText: [...(filter.includesText || [])],
        excludesText: [...(filter.excludesText || [])],
        regexp: filter.regexp || '',
        callbackTopic: filter.callbackTopic || ''
      });
    }
  }, [filter]);

  const validateRegex = (pattern: string): boolean => {
    if (!pattern) return true;
    try {
      new RegExp(pattern);
      return true;
    } catch {
      return false;
    }
  };

  const handleSave = async () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.name?.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (formData.regexp && !validateRegex(formData.regexp)) {
      newErrors.regexp = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ';
    }

    if ((formData.includesText?.length || 0) === 0 &&
      (formData.excludesText?.length || 0) === 0 &&
      !formData.regexp) {
      newErrors.general = '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏';
    }

    setErrors(newErrors);

    if (Object.keys(newErrors).length > 0) {
      infoError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
      return;
    }

    try {
      await updateFilter({ id: id!, data: formData }).unwrap();
      infoSuccess('–§–∏–ª—å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      setIsEditing(false);
      navigate(`/filters/${id}`);
    } catch (error) {
      infoError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞');
      console.error('Update filter error:', error);
    }
  };

  const handleCancel = () => {
    setIsEditing(false);
    setFormData({
      name: filter?.name,
      includesText: [...(filter?.includesText || [])],
      excludesText: [...(filter?.excludesText || [])],
      regexp: filter?.regexp || '',
      callbackTopic: filter?.callbackTopic || ''
    });
    setErrors({});
    navigate(`/filters/${id}`);
  };

  const addIncludeText = () => {
    const text = includeInput.trim();
    if (text && !(formData.includesText || []).includes(text)) {
      setFormData(prev => ({
        ...prev,
        includesText: [...(prev.includesText || []), text]
      }));
      setIncludeInput('');
      if (errors.general) {
        setErrors(prev => ({ ...prev, general: '' }));
      }
    }
  };

  const removeIncludeText = (index: number) => {
    setFormData(prev => ({
      ...prev,
      includesText: (prev.includesText || []).filter((_, i) => i !== index)
    }));
  };

  const addExcludeText = () => {
    const text = excludeInput.trim();
    if (text && !(formData.excludesText || []).includes(text)) {
      setFormData(prev => ({
        ...prev,
        excludesText: [...(prev.excludesText || []), text]
      }));
      setExcludeInput('');
      if (errors.general) {
        setErrors(prev => ({ ...prev, general: '' }));
      }
    }
  };

  const removeExcludeText = (index: number) => {
    setFormData(prev => ({
      ...prev,
      excludesText: (prev.excludesText || []).filter((_, i) => i !== index)
    }));
  };

  const handleTest = () => {
    modal.openModal(
      'testFilter',
      <TestFilterModal filterId={id!} filterName={filter?.name || ''} />,
      { title: `–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: ${filter?.name}` }
    );
  };

  const callbackTopics = [
    { value: '', label: '–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è' },
    { value: 'webhook', label: 'Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' },
    { value: 'email', label: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' },
    { value: 'log', label: '–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥' },
    { value: 'telegram', label: 'Telegram –±–æ—Ç' },
    { value: 'database', label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É' }
  ];

  if (isFetching) {
    return (
      <div className={css.loading}>
        <div className={css.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞...</div>
      </div>
    );
  }

  if (error || !filter) {
    return (
      <div className={css.wrapper}>
        <NoData
          text="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
          subText="–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–ª—å—Ç—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É"
        />
      </div>
    );
  }

  return (
    <div className={css.wrapper}>
      <div className={css.header}>
        <div className={css.titleSection}>
          <h1 className={css.title}>
            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞' : filter.name}
          </h1>
          <div className={css.metadata}>
            <span>–°–æ–∑–¥–∞–Ω: {new Date(filter.createdAt).toLocaleDateString('ru-RU')}</span>
            <span>‚Ä¢</span>
            <span>–û–±–Ω–æ–≤–ª–µ–Ω: {new Date(filter.updatedAt).toLocaleDateString('ru-RU')}</span>
          </div>
        </div>

        <div className={css.actions}>
          {!isEditing ? (
            <>
              <Button
                icon={FaPlay}
                onClick={handleTest}
                variant="ghost"
              >
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <Button
                icon={FaEdit}
                onClick={() => setIsEditing(true)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            </>
          ) : (
            <>
              <Button
                icon={FaSave}
                onClick={handleSave}
                disabled={isUpdating}
              >
                {isUpdating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
              <Button
                icon={FaTimes}
                variant="ghost"
                onClick={handleCancel}
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
            </>
          )}
        </div>
      </div>

      {errors.general && (
        <div className={css.generalError}>
          <FaTimes className={css.errorIcon} />
          {errors.general}
        </div>
      )}

      <div className={css.content}>
        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className={css.sectionIcon}>üìù</div>
          </div>

          {isEditing ? (
            <div className={css.editSection}>
              <Input
                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ *"
                value={formData.name || ''}
                onChange={(e) => {
                  setFormData(prev => ({ ...prev, name: e.target.value }));
                  if (errors.name) setErrors(prev => ({ ...prev, name: '' }));
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"
                required
              />

              <div className={css.inputGroup}>
                <label className={css.label}>–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏</label>
                <select
                  className={css.select}
                  value={formData.callbackTopic || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, callbackTopic: e.target.value }))}
                >
                  {callbackTopics.map(topic => (
                    <option key={topic.value} value={topic.value}>
                      {topic.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          ) : (
            <div className={css.viewSection}>
              <div className={css.infoItem}>
                <span className={css.infoLabel}>–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
                <span className={css.infoValue}>{filter.name}</span>
              </div>
              <div className={css.infoItem}>
                <span className={css.infoLabel}>–î–µ–π—Å—Ç–≤–∏–µ:</span>
                <span className={css.infoValue}>
                  {filter.callbackTopic ?
                    callbackTopics.find(t => t.value === filter.callbackTopic)?.label || filter.callbackTopic :
                    '–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è'
                  }
                </span>
              </div>
            </div>
          )}
        </div>

        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–¢–µ–∫—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è</h3>
            <div className={css.sectionIcon}>üîç</div>
          </div>

          <div className={css.conditionsContainer}>
            <div className={css.conditionGroup}>
              <div className={css.conditionHeader}>
                <FaThumbsUp className={css.includeIcon} />
                <span className={css.conditionLabel}>–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</span>
              </div>

              {isEditing ? (
                <>
                  <div className={css.inputWithButton}>
                    <Input
                      value={includeInput}
                      onChange={(e) => setIncludeInput(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addIncludeText())}
                      placeholder="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É..."
                    />
                    <Button
                      onClick={addIncludeText}
                      disabled={!includeInput.trim()}

                    >
                      –î–æ–±–∞–≤–∏—Ç—å
                    </Button>
                  </div>

                  {(formData.includesText?.length || 0) > 0 && (
                    <div className={css.tags}>
                      {(formData.includesText || []).map((text, index) => (
                        <div key={index} className={`${css.tag} ${css.includeTag}`}>
                          <span>{text}</span>
                          <Button

                            variant="ghost"
                            icon={FaTimes}
                            onClick={() => removeIncludeText(index)}
                            className={css.removeTag}
                          />
                        </div>
                      ))}
                    </div>
                  )}
                </>
              ) : (
                <div className={css.tags}>
                  {filter.includesText && filter.includesText.length > 0 ? (
                    filter.includesText.map((text, index) => (
                      <span key={index} className={`${css.tag} ${css.includeTag}`}>
                        {text}
                      </span>
                    ))
                  ) : (
                    <span className={css.emptyText}>–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>
                  )}
                </div>
              )}
            </div>

            <div className={css.conditionGroup}>
              <div className={css.conditionHeader}>
                <FaThumbsDown className={css.excludeIcon} />
                <span className={css.conditionLabel}>–ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</span>
              </div>

              {isEditing ? (
                <>
                  <div className={css.inputWithButton}>
                    <Input
                      value={excludeInput}
                      onChange={(e) => setExcludeInput(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addExcludeText())}
                      placeholder="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É..."
                    />
                    <Button
                      onClick={addExcludeText}
                      disabled={!excludeInput.trim()}

                    >
                      –î–æ–±–∞–≤–∏—Ç—å
                    </Button>
                  </div>

                  {(formData.excludesText?.length || 0) > 0 && (
                    <div className={css.tags}>
                      {(formData.excludesText || []).map((text, index) => (
                        <div key={index} className={`${css.tag} ${css.excludeTag}`}>
                          <span>{text}</span>
                          <Button

                            variant="ghost"
                            icon={FaTimes}
                            onClick={() => removeExcludeText(index)}
                            className={css.removeTag}
                          />
                        </div>
                      ))}
                    </div>
                  )}
                </>
              ) : (
                <div className={css.tags}>
                  {filter.excludesText && filter.excludesText.length > 0 ? (
                    filter.excludesText.map((text, index) => (
                      <span key={index} className={`${css.tag} ${css.excludeTag}`}>
                        {text}
                      </span>
                    ))
                  ) : (
                    <span className={css.emptyText}>–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className={css.section}>
          <div className={css.sectionHeader}>
            <h3 className={css.sectionTitle}>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</h3>
            <div className={css.sectionIcon}>
              Icon
            </div>
          </div>

          {isEditing ? (
            <TextBox
              label="–ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"
              value={formData.regexp || ''}
              onChange={(e) => {
                setFormData(prev => ({ ...prev, regexp: e.target.value }));
                if (errors.regexp) setErrors(prev => ({ ...prev, regexp: '' }));
              }}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: \b(–≤–∞–∂–Ω–æ|—Å—Ä–æ—á–Ω–æ|urgent)\b"
              rows={3}

            />
          ) : (
            <div className={css.regexDisplay}>
              {filter.regexp ? (
                <code className={css.regexCode}>{filter.regexp}</code>
              ) : (
                <span className={css.emptyText}>–ù–µ —É–∫–∞–∑–∞–Ω–æ</span>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FilterDetailPage;